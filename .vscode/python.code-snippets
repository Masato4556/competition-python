{
    "二分探索で探索対象のインデックスを返す": {
        "prefix": "binary_find",
        "body": [
            "def binary_find(arr, target):",
            "    \"\"\"",
            "    arr: 昇順にソートされた数値の列（リストや配列など）",
            "    target: 探索する数値",
            "    \"\"\"",
            "    left, right = 0, len(arr) - 1  # 探索範囲の左端と右端",
            "    while left <= right:",
            "        mid = (left + right) // 2  # 探索範囲の中央のインデックス",
            "        if arr[mid] == target:",
            "            return mid  # 探索対象が見つかった場合、そのインデックスを返す",
            "        elif arr[mid] < target:",
            "            left = mid + 1  # 中央より大きい場合、探索範囲を中央より右側にする",
            "        else:",
            "            right = mid - 1  # 中央より小さい場合、探索範囲を中央より左側にする",
            "    return -1  # 探索対象が見つからなかった場合、-1を返す"
        ],
        "description": "二分探索で探索対象のインデックスを返す"
    },
    "二分探索で探索対象のインデックスを返す(探索対象が存在しない場合、最も近しい値のインデックスを返す)": {
        "prefix": "binary_search",
        "body": [
            "def binary_search(arr, target):",
            "    \"\"\"",
            "    arr: 昇順にソートされた数値の列（リストや配列など）",
            "    target: 探索する数値",
            "    \"\"\"",
            "    left, right = 0, len(arr) - 1  # 探索範囲の左端と右端",
            "    while left <= right:",
            "        mid = (left + right) // 2  # 探索範囲の中央のインデックス",
            "        if arr[mid] == target:",
            "            return mid  # 探索対象が見つかった場合、そのインデックスを返す",
            "        elif arr[mid] < target:",
            "            left = mid + 1  # 中央より大きい場合、探索範囲を中央より右側にする",
            "        else:",
            "            right = mid - 1  # 中央より小さい場合、探索範囲を中央より左側にする",
            "",
            "    # arr中にxが含まれない場合",
            "    # 探索した値と最も近い要素のインデックスを返す",
            "    if left > len(arr) - 1:",
            "        return len(arr) - 1",
            "    elif right < 0:",
            "        return 0",
            "    else:",
            "        if target - arr[right] < arr[left] - target:",
            "            return right",
            "        else:",
            "            return left"
        ],
        "description": "二分探索で探索対象のインデックスを返す(探索対象が存在しない場合、最も近しい値のインデックスを返す)"
    }
}